'''
Pentagonal numbers are generated by the formula, P_n = n*(3*n-1)/2.
The first ten pentagonal numbers are:

    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8.
However, their difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, P_j and P_k, for which their sum and
difference are pentagonal and D = |P_k - P_j| is minimised;
what is the value of D?
'''
import itertools


def P(n):
    return (3 * n * n - n) / 2


class P_cache(object):
    def __init__(self, limit):
        self.P_dict = dict()
        self.P_values = set()
        self.P_max = 0
        self.update_P(limit)


    def update_P(self, n):
        for i in xrange(self.P_max + 1, n + 1):
            P_value = P(i)
            self.P_dict[i] = P_value
            self.P_values.add(P_value)
        self.P_max = i
        self.P_max_value = P_value


    def update_P_max(self, target):
        for P, P_value in self.update_P_max_generator(target):
            self.P_dict[P] = P_value
            self.P_values.add(P_value)
        self.P_max = P
        self.P_max_value = P_value


    def update_P_max_generator(self, target):
        current_P = self.P_max + 1
        current_P_value = P(current_P)
        while current_P_value < target:
            yield current_P, current_P_value
            current_P += 1
            current_P_value = P(current_P)
        yield current_P, current_P_value


    def get_P(self, n):
        if n > self.P_max:
            self.update_P(n)
        return self.P_dict[n]


    def is_P(self, value):
        if value > self.P_max_value:
            self.update_P_max(value)
        return value in self.P_values


def findPair():
    cache = P_cache(3000)
    for k in itertools.count(2):
        P_k = cache.get_P(k)
        for j in xrange(1, k):
            P_j = cache.get_P(j)
            if cache.is_P(P_k + P_j) and cache.is_P(P_k - P_j):
                return abs(P_k - P_j)


print findPair()
